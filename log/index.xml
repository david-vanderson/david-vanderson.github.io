<rss version="2.0">
  <channel>
    <title>DVUI</title>
    <link>https://david-vanderson.github.io</link>
    <description>DVUI - Devlog</description>
    <generator>Zine -- https://zine-ssg.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 02 Aug 2025 00:59:00 +0000</lastBuildDate>
    
      
        <item>
          <title>July 2025
</title>
          <description>&lt;div id=&quot;2025-08-01&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-08-01&quot;&gt;July 2025&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt; people contributed this month with &lt;strong&gt;229&lt;/strong&gt; commits.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Teodor Källman&lt;/strong&gt; kept the streak alive:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;new theme editor example in the demo&lt;/li&gt;&lt;li&gt;online options editor&lt;ul&gt;&lt;li&gt;override widget Options live to see the changes&lt;/li&gt;&lt;li&gt;open the dvui debug window&lt;/li&gt;&lt;li&gt;select a widget (using Debug Under Mouse)&lt;/li&gt;&lt;li&gt;click “Edit Options” in top right corner&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In general this month had tons of improvements across the board:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;grid improvements&lt;/li&gt;&lt;li&gt;more uniform scrolling across backends&lt;/li&gt;&lt;li&gt;better scrolling on macos&lt;/li&gt;&lt;li&gt;web: better support for on screen keyboards&lt;/li&gt;&lt;li&gt;demo cleanups&lt;/li&gt;&lt;li&gt;more errors logged to ease development bugs&lt;/li&gt;&lt;li&gt;ImageSource&lt;ul&gt;&lt;li&gt;progress on making &lt;code&gt;image()&lt;/code&gt; smarter about when to regenerate textures&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Options.data_out&lt;ul&gt;&lt;li&gt;general mechanism to extract data about a widget even from a high level api&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Big thanks to everyone who landed at least one commit:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Teodor Källman&lt;/li&gt;&lt;li&gt;Paul Hatchman&lt;/li&gt;&lt;li&gt;nat3&lt;/li&gt;&lt;li&gt;Colton Franklin&lt;/li&gt;&lt;li&gt;Deins&lt;/li&gt;&lt;li&gt;Meiko&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you to everyone who asked questions, filed issues, and contributed!&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-08-01</link>
          <pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-08-01</guid>
        </item>
      
        <item>
          <title>Removing Bubbled Events
</title>
          <description>&lt;div id=&quot;2025-07-09&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-07-09&quot;&gt;Removing Bubbled Events&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We recently removed callbacks for key events.  This is pushing the immediate-mode paradigm forward in an unexpected way.&lt;/p&gt;&lt;p&gt;For background, widget relationships can affect who handles each event.  With immediate-mode, a parent widget does not know what children it will see each frame.&lt;/p&gt;&lt;p&gt;Mouse events:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;parent might process it &lt;strong&gt;before&lt;/strong&gt; children&lt;ul&gt;&lt;li&gt;example: floating window reserves the bottom-left corner for resizing&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;parent might process it &lt;strong&gt;after&lt;/strong&gt; children&lt;ul&gt;&lt;li&gt;example: floating window header does click drag if click is &lt;strong&gt;not&lt;/strong&gt; on the close button&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This works by checking the event against widget rectangles.  A parent can know if a child got a chance, because all the children are inside the parent’s rectangle.&lt;/p&gt;&lt;p&gt;Key events are different, they target the widget with keyboard focus.&lt;/p&gt;&lt;p&gt;Key events:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;parents might process it &lt;strong&gt;after&lt;/strong&gt; children&lt;ul&gt;&lt;li&gt;example: up arrow on a button should scroll the containing scroll area (if any)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To make this work, we used to have each widget propagate non-processed key events up the parent chain, just in case a parent wanted to process them.&lt;/p&gt;&lt;p&gt;This works, but uses callbacks.  To add a keyboard shortcut to only a section of the gui, you had to write a whole Widget that was the parent of that whole section.  Ugh.&lt;/p&gt;&lt;p&gt;We finally found the key question:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;How can a parent know if one of the children had focus?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;More generally:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;How can we know if any sequence of widgets had focus?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The answer is &lt;code&gt;dvui.lastFocusedIdInFrame()&lt;/code&gt;.  It returns the last widget id we saw during this frame that had focus (might be none).&lt;/p&gt;&lt;p&gt;If you call that twice, and the return is different, then a widget that ran between the two calls had focus.  And you have the id to match events against.&lt;/p&gt;&lt;p&gt;Now to add a keyboard shortcut to a gui section:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;put the two calls around the section&lt;/li&gt;&lt;li&gt;if different, match events against the second return&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This is also now what widgets use internally to process key events after children.  It also improves code-flow understanding by not having parent code called during a child’s lifetime.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-07-09</link>
          <pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-07-09</guid>
        </item>
      
        <item>
          <title>June 2025
</title>
          <description>&lt;div id=&quot;2025-07-02&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-07-02&quot;&gt;June 2025&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;8&lt;/strong&gt; people contributed this month with &lt;strong&gt;301&lt;/strong&gt; commits.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Colton Franklin&lt;/strong&gt; contributed a whole tree widget!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;easily show a filesystem or other tree-like data&lt;/li&gt;&lt;li&gt;expanding subtrees&lt;/li&gt;&lt;li&gt;drag-n-drop&lt;/li&gt;&lt;li&gt;see the “Reorder / Tree” section of the demo&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Teodor Källman&lt;/strong&gt; continued their impressive contributions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;removing errors on most functions (see &lt;a href=&quot;#2025-06-17&quot;&gt;below&lt;/a&gt;)&lt;ul&gt;&lt;li&gt;error logs with stack traces&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;major overhaul of dvui’s allocations:&lt;ul&gt;&lt;li&gt;shrinking arena wrapper on Zig’s arena allocator&lt;/li&gt;&lt;li&gt;splitting dvui’s allocations to improve peak memory use&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;matching the system light/dark theme by default&lt;/li&gt;&lt;li&gt;tons of backend fixes and enhancements&lt;/li&gt;&lt;li&gt;fixes to prevent using undefined&lt;/li&gt;&lt;li&gt;removing bubbling events (see &lt;a href=&quot;#2025-07-09&quot;&gt;above&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Paul Hatchman&lt;/strong&gt; put a lot of work into:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;grid features&lt;ul&gt;&lt;li&gt;populate the grid by row or col&lt;/li&gt;&lt;li&gt;resizable columns&lt;/li&gt;&lt;li&gt;sortable columns&lt;/li&gt;&lt;li&gt;keyboard navigation&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;safety checks to prevent use-after-free bugs&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;nat3&lt;/strong&gt; was back:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;image() from rgba bytes&lt;/li&gt;&lt;li&gt;rendering tvg at runtime&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Meiko&lt;/strong&gt; contributed:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;build.zig changes to improve zls info for backends&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you to everyone who asked questions, filed issues, and contributed!&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-07-02</link>
          <pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-07-02</guid>
        </item>
      
        <item>
          <title>Live Resize on Windows and Mac
</title>
          <description>&lt;div id=&quot;2025-06-24&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-06-24&quot;&gt;Live Resize on Windows and Mac&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We all want our applications to repaint smoothly while the OS window is being resized.&lt;/p&gt;&lt;p&gt;Unfortunately Windows and Mac make this difficult.  The normal event loop is suspended during the entire resize.&lt;/p&gt;&lt;p&gt;This meant during the resize you saw:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Windows: frozen last frame maybe cropped or with additional space&lt;/li&gt;&lt;li&gt;Mac: frozen last frame stretched/squashed to fit&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The underlying problem on both platforms is that they run a nested event loop during the resize, so we lose control.&lt;/p&gt;&lt;p&gt;There seem to be 2 solutions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;implement callbacks - render a new frame in the callback&lt;/li&gt;&lt;li&gt;use multiple threads - render in a separate thread and coordinate&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We now use the callback solution by default in the &lt;strong&gt;SDL3 backend if you are using dvui.App&lt;/strong&gt; (so already using callbacks).&lt;/p&gt;&lt;p&gt;This works, you can see the content reflow while resizing!&lt;/p&gt;&lt;p&gt;But it is not perfect:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Windows: &lt;del&gt;it causes a delay when dragging the OS window around by the window title bar&lt;/del&gt;&lt;ul&gt;&lt;li&gt;SDL resolved this issue - we think by disabling vsync during the drag&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Mac: resizing introduces some jitter in the sizing of the OS window&lt;/li&gt;&lt;li&gt;While enabled by default, it can be disabled by &lt;code&gt;-Dsdl3-callbacks=false&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As best I can tell, to improve on this you have to use multiple threads and put a lot of bespoke code in.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-06-24</link>
          <pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-06-24</guid>
        </item>
      
        <item>
          <title>Removing Errors From Most Functions
</title>
          <description>&lt;div id=&quot;2025-06-17&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-06-17&quot;&gt;Removing Errors From Most Functions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Teodor Källman has successfully removed errors from almost all dvui functions.  Horay!&lt;/p&gt;&lt;p&gt;Now dvui handles most errors internally:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the high level API failes to allocate space for a widget, we panic.&lt;ul&gt;&lt;li&gt;The alternative is to allocate the widget on the stack, but it is unclear how that would be better.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If a widget gets an error while rendering, it logs it and continues.&lt;/li&gt;&lt;li&gt;If a widget gets an allocation error internally (like a label format that goes bad), it logs it and continues.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some functions like &lt;code&gt;textureCreate()&lt;/code&gt; can still fail.&lt;/p&gt;&lt;p&gt;Up to this point we hadn’t spent much time thinking about errors.  Everybody (that I saw) put &lt;code&gt;try&lt;/code&gt; in front of all dvui functions, and any error took down the whole app.&lt;/p&gt;&lt;p&gt;Now dvui is aiming to be more robust to errors, especially cases under end-user control.&lt;/p&gt;&lt;p&gt;For example, if your gui shows user-controlled text or graphs user data, then we’d like for dvui to not crash if the user tries to show way too much text/info.  Ideally dvui continues running and shows some visual indication that something is wrong, allowing the user to get back out of the situation.&lt;/p&gt;&lt;p&gt;This is the first big push in that direction, and we’ll continue to refine how we handle errors going forward.&lt;/p&gt;&lt;p&gt;If you have an application where dvui error handling is causing problems, I want to know!  Please file an issue.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-06-17</link>
          <pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-06-17</guid>
        </item>
      
        <item>
          <title>Raylib Variable Framerate
</title>
          <description>&lt;div id=&quot;2025-06-04&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-06-04&quot;&gt;Raylib Variable Framerate&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;@sooriya on discord recently asked if we could do variable framerate on raylib, and now we can!&lt;/p&gt;&lt;p&gt;For waiting on an event without any timeout, raylib already had the necessary pieces with EnableEventWaiting().&lt;/p&gt;&lt;p&gt;For waiting with a timeout, I submitted a proposal PR to raylib, but it was turned down.  So for that we are assuming that raylib is using glfw and we are directly calling glfwWaitEventsTimeout().&lt;/p&gt;&lt;p&gt;You can get this either by using dvui.App or copying the relevant parts from the updated examples/raylib-standalone.zig.&lt;/p&gt;&lt;p&gt;It’s not perfect:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;glfwWaitEventsTimeout() doesn’t tell us if it was interrupted or not&lt;/li&gt;&lt;li&gt;if an event comes between EndDrawing() and glfwWaitEventsTimeout() we will wait anyway&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;But it’s good enough for applications that don’t want to peg the cpu.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-06-04</link>
          <pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-06-04</guid>
        </item>
      
        <item>
          <title>May 2025
</title>
          <description>&lt;div id=&quot;2025-06-01&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-06-01&quot;&gt;May 2025&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt; people contributed this month with &lt;strong&gt;192&lt;/strong&gt; commits.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;nat3&lt;/strong&gt; rewrote and improved our icon rendering and compatibility:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/nat3Github/zig-lib-svg2tvg&quot; target=&quot;_blank&quot;&gt;svg2tvg&lt;/a&gt; is now dvui’s icon renderer&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/nat3Github/zig-lib-icons&quot; target=&quot;_blank&quot;&gt;icons&lt;/a&gt; hosts many icons in tvg format&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Paul Hatchman&lt;/strong&gt; wrote an entire GridWidget:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;see “Grid” part of the demo for all the cool functionality&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Teodor Källman&lt;/strong&gt; was back again:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#2025-05-12&quot;&gt;type safety&lt;/a&gt; for Rect/Size/Point&lt;/li&gt;&lt;li&gt;type safety for pre-multiplied alpha in Color&lt;/li&gt;&lt;li&gt;color picker&lt;/li&gt;&lt;li&gt;debug logging handled and unhandled events&lt;/li&gt;&lt;li&gt;triangles drawing abstraction supporting:&lt;ul&gt;&lt;li&gt;gradients&lt;/li&gt;&lt;li&gt;box shadows&lt;/li&gt;&lt;li&gt;textures with rounded corners&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;snapshots independent of rendering&lt;/li&gt;&lt;li&gt;better documentation image generation&lt;/li&gt;&lt;li&gt;suggestion/combobox filtering&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;See “Styling” part of the demo for the color picker, box shadows, and gradients.&lt;/p&gt;&lt;p&gt;Thank you!&lt;/p&gt;&lt;p&gt;Thank you to everyone who asked questions, filed issues, and contributed!&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-06-01</link>
          <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-06-01</guid>
        </item>
      
        <item>
          <title>In the Wild: Layer Failure
</title>
          <description>&lt;div id=&quot;2025-05-22&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-05-22&quot;&gt;In the Wild: Layer Failure&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://david-vanderson.github.io/log/2025/fail_layer.gif&quot;&gt;&lt;/p&gt;&lt;p&gt;What’s going on here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I touch “cancel”&lt;/li&gt;&lt;li&gt;Dialog goes away&lt;/li&gt;&lt;li&gt;My touch &lt;em&gt;also&lt;/em&gt; clicks the button underneath “cancel”&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the end a store assistant came over and knew some other place on the screen you could touch to get rid of the dialog.&lt;/p&gt;&lt;p&gt;This kind of thing is why DVUI put a lot of work into the interaction between events and subwindows (dvui’s layers).&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-05-22</link>
          <pubDate>Thu, 22 May 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-05-22</guid>
        </item>
      
        <item>
          <title>Taking Units Seriously
</title>
          <description>&lt;div id=&quot;2025-05-12&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-05-12&quot;&gt;Taking Units Seriously&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;DVUI’s main geometry struct is a &lt;code&gt;Rect&lt;/code&gt; (rectangle with x,y and width/height).  But what are the units?&lt;/p&gt;&lt;p&gt;We have 3 common units:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Physical Pixels&lt;ul&gt;&lt;li&gt;1-to-1 with screen/output pixels&lt;/li&gt;&lt;li&gt;dvui events and drawing use this&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Natural Pixels&lt;ul&gt;&lt;li&gt;approximately 72 per inch&lt;/li&gt;&lt;li&gt;will be different from Physical on hidpi screens&lt;/li&gt;&lt;li&gt;modified by content scaling&lt;/li&gt;&lt;li&gt;dvui floating windows/widgets use this&lt;/li&gt;&lt;li&gt;OS events generally use this&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Logical Pixels&lt;ul&gt;&lt;li&gt;local coordinates possibly modified by parent widgets&lt;/li&gt;&lt;li&gt;ScaleWidget changes this&lt;/li&gt;&lt;li&gt;normal widgets use this&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For example, you might specify a &lt;code&gt;textEntry&lt;/code&gt; with a font that is 16px tall and &lt;code&gt;.min_content_size = .{ .w = 100 }&lt;/code&gt;.  Those are logical pixels, so they mean something together, but don’t say anything about how large it will be on the screen.&lt;/p&gt;&lt;p&gt;To convert, widgets call &lt;code&gt;WidgetData.rectScale()&lt;/code&gt; (or similar) which calls &lt;code&gt;parent.screenRectScale()&lt;/code&gt; to get a &lt;code&gt;RectScale&lt;/code&gt;.  That is a physical rect plus a scale, and represents a rectangle of screen pixels and the scale factor between logical and physical pixels.&lt;/p&gt;&lt;p&gt;From the beginning we’ve had a steady stream of units errors because the units were implicit.&lt;/p&gt;&lt;h4&gt;Making Units Explicit&lt;/h4&gt;&lt;p&gt;We’re trying out adding units to the types.  Now we have:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rect (Logical)&lt;/li&gt;&lt;li&gt;Rect.Physical&lt;/li&gt;&lt;li&gt;Rect.Natural&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For example &lt;code&gt;RectScale.rectToPhysical()&lt;/code&gt; converts from a (logical) Rect to Rect.Physical.  &lt;code&gt;Rect.scale()&lt;/code&gt; now requires a unit type representing the units being converted to.&lt;/p&gt;&lt;p&gt;The drawing functions all take Rect.Physical, and the floating functions take Rect.Natural, hopefully making most units errors into compile errors.&lt;/p&gt;&lt;p&gt;This has already caught a few bugs, and I’m hoping it helps going forward.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-05-12</link>
          <pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-05-12</guid>
        </item>
      
        <item>
          <title>April 2025
</title>
          <description>&lt;div id=&quot;2025-05-01&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-05-01&quot;&gt;April 2025&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Special thank you this month to Teodor Källman, who implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Testing&lt;ul&gt;&lt;li&gt;we can now run gui tests as normal zig tests&lt;/li&gt;&lt;li&gt;testing backend that runs headless&lt;/li&gt;&lt;li&gt;github actions to run the builtin tests&lt;/li&gt;&lt;li&gt;snapshot images for ensuring no visible changes&lt;/li&gt;&lt;li&gt;documentation images produced from tests&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Scripting&lt;ul&gt;&lt;li&gt;gui interactions can be automated for testing/scripting&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dx11 backend render targets&lt;/li&gt;&lt;li&gt;Animation easing functions&lt;/li&gt;&lt;li&gt;Rounded corners on textures&lt;/li&gt;&lt;li&gt;App&lt;ul&gt;&lt;li&gt;higher-level interface for using dvui&lt;/li&gt;&lt;li&gt;dvui runs the mainloop (you provide a few callbacks)&lt;/li&gt;&lt;li&gt;app can be run on multiple backends&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you to @Yinameah for making the docs look much better!&lt;/p&gt;&lt;p&gt;7 people contributed this month with 227 commits.&lt;/p&gt;&lt;p&gt;Thank you to everyone who asked questions, filed issues, and contributed!&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-05-01</link>
          <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-05-01</guid>
        </item>
      
        <item>
          <title>type-based intent
</title>
          <description>&lt;div id=&quot;2025-04-30&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-04-30&quot;&gt;type-based intent&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We recently split &lt;code&gt;Texture&lt;/code&gt; into two types: &lt;code&gt;Texture&lt;/code&gt; and &lt;code&gt;TextureTarget&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Both have the same fields (pointer, width, height), so what gives?&lt;/p&gt;&lt;p&gt;Backends make two varieties of textures:  “Normal” ones that are drawn &lt;strong&gt;from&lt;/strong&gt;, and “Target” ones that are drawn &lt;strong&gt;to&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Some backends (web, raylib) treat these interchangeably.  But sdl can’t read from a “Normal”, and dx11 can’t draw from a “Target”.&lt;/p&gt;&lt;p&gt;Generally the type you get from the backend is the same, but there is a bit of state associated with it.  We could have done the same:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pub const Texture = struct {
    is_target: bool,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But then we have to check that field (easy to mess up), and have a way to notify developers if they used the wrong kind in the wrong place.&lt;/p&gt;&lt;h4&gt;Type-based Intent&lt;/h4&gt;&lt;p&gt;We are now putting that bit of state into the type:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// this is always &amp;quot;normal&amp;quot;
pub const Texture = struct { ... };

// this is always &amp;quot;target&amp;quot;
pub const TextureTarget = struct { ... };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you get a compile error when trying to use the wrong one in the wrong place.  Great!&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-04-30</link>
          <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-04-30</guid>
        </item>
      
        <item>
          <title>March 2025
</title>
          <description>&lt;div id=&quot;2025-04-01&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-04-01&quot;&gt;March 2025&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;dvui got a bunch of new stuff this month:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;combobox (combines textEntry and dropdown)&lt;/li&gt;&lt;li&gt;suggestions (choices that show dynamically under a textEntry)&lt;/li&gt;&lt;li&gt;tooltips&lt;/li&gt;&lt;li&gt;web file upload&lt;/li&gt;&lt;li&gt;simple plots&lt;/li&gt;&lt;li&gt;kerning&lt;/li&gt;&lt;li&gt;horizontal mouse wheel support&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Plus a whole ton of minor fixes and enhancements.&lt;/p&gt;&lt;p&gt;We had 6 people contribute this month!&lt;/p&gt;&lt;p&gt;Thank you to everyone who asked questions, filed issues, and contributed!&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-04-01</link>
          <pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-04-01</guid>
        </item>
      
        <item>
          <title>double click, long tap, and friction
</title>
          <description>&lt;div id=&quot;2025-03-11&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-03-11&quot;&gt;double click, long tap, and friction&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;dvui does not currently have built-in support for double-click, double-tap, or long-tap.  My current thinking is that those interaction patterns are generally worse than the alternatives.&lt;/p&gt;&lt;p&gt;The general advantage of these is to have a second way to interact with a widget besides a normal click/tap.  Otherwise you need a separate widget, or the widget be modal, or change depending on zoom level, or some other redesign.&lt;/p&gt;&lt;p&gt;The downsides are poor discoverability and accessibility.  I’ve personally had the experience of trying to double-click or long-tap something, nothing happens, and I’m left unsure if it doesn’t exist or if I did the interaction wrong.&lt;/p&gt;&lt;p&gt;I’ve watched people with slight hand shakiness try to long-tap repeatedly but only ever get a touch-drag.&lt;/p&gt;&lt;p&gt;This is why dvui’s textLayout and textEntry widgets provide a modal touch interface.  A single tap transitions between normal mode and selection mode.&lt;/p&gt;&lt;p&gt;They do have mouse-only 2-click word select and 3-click line select.  Those are features that are useful to some while not requiring use by all.&lt;/p&gt;&lt;h4&gt;How much should my opinions shape dvui’s design?&lt;/h4&gt;&lt;p&gt;On one hand dvui must serve its users (developers) in providing the UI features they need and want.&lt;/p&gt;&lt;p&gt;On the other hand dvui should serve its users by making it easier to build good UIs than bad ones.  Nobody wants a button that by default only responds to a triple-click.&lt;/p&gt;&lt;p&gt;My strategy is to make requested features possible, but use my experience to guide developers by making some features easier to use than others.&lt;/p&gt;&lt;p&gt;We see a similar strategy in Zig design, where the core team uses “friction” to guide developers - some patterns are intentionally left more awkward to use than others to discorage their use while not preventing it outright.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-03-11</link>
          <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-03-11</guid>
        </item>
      
        <item>
          <title>min_size_content is not the minimum
</title>
          <description>&lt;div id=&quot;2025-02-23&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-02-23&quot;&gt;min_size_content is not the minimum&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If the parent does not have enough space, child widgets get less than their min size.&lt;/p&gt;&lt;p&gt;What about &lt;strong&gt;max_size_content&lt;/strong&gt; - can a widget get more?&lt;/p&gt;&lt;p&gt;Yes - if that widget is expanded, it can be larger than max_size_content.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;min_size_content&lt;/strong&gt; and &lt;strong&gt;max_size_content&lt;/strong&gt; are both constraints imposed on the minimum size that dvui saves for each widget from frame to frame.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-02-23</link>
          <pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-02-23</guid>
        </item>
      
        <item>
          <title>Why min_size_content?
</title>
          <description>&lt;div id=&quot;2025-02-22&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-02-22&quot;&gt;Why min_size_content?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To make it clear that padding/border/margin is added on top of that.&lt;/p&gt;&lt;p&gt;Why not just &lt;strong&gt;min_size&lt;/strong&gt;?&lt;/p&gt;&lt;p&gt;This is an example of naming tension in API design.&lt;/p&gt;&lt;p&gt;When you want a widget to be larger than its minimum size (but not expanded):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;.{ .min_size_content = .{ .w = 100, .h = 50 } }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We could make it shorter and easier to remember by using just &lt;strong&gt;min_size&lt;/strong&gt;, but then you have to remember (or lookup) if that already includes padding/border/margin.&lt;/p&gt;&lt;p&gt;So &lt;strong&gt;min_size_content&lt;/strong&gt; costs more characters but makes reading the code (especially for people new to DVUI) slightly easier.&lt;/p&gt;&lt;p&gt;Hard to know which way to go, but I think about stuff like this a lot.&lt;/p&gt;&lt;/div&gt;</description>
          <link>https://david-vanderson.github.io/log/#2025-02-22</link>
          <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
          <guid>https://david-vanderson.github.io/log/#2025-02-22</guid>
        </item>
      
    
  </channel>
</rss>
