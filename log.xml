<rss version="2.0">
 <channel>
  <title>DVUI Devlog</title>
  <link>https://david-vanderson.github.io/</link>
  <description>Development Log for DVUI</description>
  <generator>Zine -- https://zine-ssg.io</generator>
  <language>en-us</language>
  <lastBuildDate>Fri, 02 May 2025 17:13:30 +0000</lastBuildDate>
  
    <item>
     <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
     <link>https://david-vanderson.github.io/log/#2025-05-01</link>
     <guid>https://david-vanderson.github.io/log/#2025-05-01</guid>
     <title>April 2025
</title>
     <description>&lt;div id=&quot;2025-05-01&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-05-01&quot;&gt;April 2025&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Special thank you this month to Teodor Källman, who implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Testing&lt;ul&gt;&lt;li&gt;we can now run gui tests as normal zig tests&lt;/li&gt;&lt;li&gt;testing backend that runs headless&lt;/li&gt;&lt;li&gt;github actions to run the builtin tests&lt;/li&gt;&lt;li&gt;snapshot images for ensuring no visible changes&lt;/li&gt;&lt;li&gt;documentation images produced from tests&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Scripting&lt;ul&gt;&lt;li&gt;gui interactions can be automated for testing/scripting&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dx11 backend render targets&lt;/li&gt;&lt;li&gt;Animation easing functions&lt;/li&gt;&lt;li&gt;Rounded corners on textures&lt;/li&gt;&lt;li&gt;App&lt;ul&gt;&lt;li&gt;higher-level interface for using dvui&lt;/li&gt;&lt;li&gt;dvui runs the mainloop (you provide a few callbacks)&lt;/li&gt;&lt;li&gt;app can be run on multiple backends&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you to @Yinameah for making the docs look much better!&lt;/p&gt;&lt;p&gt;7 people contributed this month with 227 commits.&lt;/p&gt;&lt;p&gt;Thank you to everyone who asked questions, filed issues, and contributed!&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  
    <item>
     <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
     <link>https://david-vanderson.github.io/log/#2025-04-30</link>
     <guid>https://david-vanderson.github.io/log/#2025-04-30</guid>
     <title>type-based intent
</title>
     <description>&lt;div id=&quot;2025-04-30&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-04-30&quot;&gt;type-based intent&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We recently split &lt;code&gt;Texture&lt;/code&gt; into two types: &lt;code&gt;Texture&lt;/code&gt; and &lt;code&gt;TextureTarget&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Both have the same fields (pointer, width, height), so what gives?&lt;/p&gt;&lt;p&gt;Backends make two varieties of textures:  “Normal” ones that are drawn &lt;strong&gt;from&lt;/strong&gt;, and “Target” ones that are drawn &lt;strong&gt;to&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Some backends (web, raylib) treat these interchangeably.  But sdl can’t read from a “Normal”, and dx11 can’t draw from a “Target”.&lt;/p&gt;&lt;p&gt;Generally the type you get from the backend is the same, but there is a bit of state associated with it.  We could have done the same:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pub const Texture = struct {
    is_target: bool,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But then we have to check that field (easy to mess up), and have a way to notify developers if they used the wrong kind in the wrong place.&lt;/p&gt;&lt;h4&gt;Type-based Intent&lt;/h4&gt;&lt;p&gt;We are now putting that bit of state into the type:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// this is always &amp;quot;normal&amp;quot;
pub const Texture = struct { ... };

// this is always &amp;quot;target&amp;quot;
pub const TextureTarget = struct { ... };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you get a compile error when trying to use the wrong one in the wrong place.  Great!&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  
    <item>
     <pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate>
     <link>https://david-vanderson.github.io/log/#2025-04-01</link>
     <guid>https://david-vanderson.github.io/log/#2025-04-01</guid>
     <title>March 2025
</title>
     <description>&lt;div id=&quot;2025-04-01&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-04-01&quot;&gt;March 2025&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;dvui got a bunch of new stuff this month:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;combobox (combines textEntry and dropdown)&lt;/li&gt;&lt;li&gt;suggestions (choices that show dynamically under a textEntry)&lt;/li&gt;&lt;li&gt;tooltips&lt;/li&gt;&lt;li&gt;web file upload&lt;/li&gt;&lt;li&gt;simple plots&lt;/li&gt;&lt;li&gt;kerning&lt;/li&gt;&lt;li&gt;horizontal mouse wheel support&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Plus a whole ton of minor fixes and enhancements.&lt;/p&gt;&lt;p&gt;We had 6 people contribute this month!&lt;/p&gt;&lt;p&gt;Thank you to everyone who asked questions, filed issues, and contributed!&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  
    <item>
     <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
     <link>https://david-vanderson.github.io/log/#2025-03-11</link>
     <guid>https://david-vanderson.github.io/log/#2025-03-11</guid>
     <title>double click, long tap, and friction
</title>
     <description>&lt;div id=&quot;2025-03-11&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-03-11&quot;&gt;double click, long tap, and friction&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;dvui does not currently have built-in support for double-click, double-tap, or long-tap.  My current thinking is that those interaction patterns are generally worse than the alternatives.&lt;/p&gt;&lt;p&gt;The general advantage of these is to have a second way to interact with a widget besides a normal click/tap.  Otherwise you need a separate widget, or the widget be modal, or change depending on zoom level, or some other redesign.&lt;/p&gt;&lt;p&gt;The downsides are poor discoverability and accessibility.  I’ve personally had the experience of trying to double-click or long-tap something, nothing happens, and I’m left unsure if it doesn’t exist or if I did the interaction wrong.&lt;/p&gt;&lt;p&gt;I’ve watched people with slight hand shakiness try to long-tap repeatedly but only ever get a touch-drag.&lt;/p&gt;&lt;p&gt;This is why dvui’s textLayout and textEntry widgets provide a modal touch interface.  A single tap transitions between normal mode and selection mode.&lt;/p&gt;&lt;p&gt;They do have mouse-only 2-click word select and 3-click line select.  Those are features that are useful to some while not requiring use by all.&lt;/p&gt;&lt;h4&gt;How much should my opinions shape dvui’s design?&lt;/h4&gt;&lt;p&gt;On one hand dvui must serve its users (developers) in providing the UI features they need and want.&lt;/p&gt;&lt;p&gt;On the other hand dvui should serve its users by making it easier to build good UIs than bad ones.  Nobody wants a button that by default only responds to a triple-click.&lt;/p&gt;&lt;p&gt;My strategy is to make requested features possible, but use my experience to guide developers by making some features easier to use than others.&lt;/p&gt;&lt;p&gt;We see a similar strategy in Zig design, where the core team uses “friction” to guide developers - some patterns are intentionally left more awkward to use than others to discorage their use while not preventing it outright.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  
    <item>
     <pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate>
     <link>https://david-vanderson.github.io/log/#2025-02-23</link>
     <guid>https://david-vanderson.github.io/log/#2025-02-23</guid>
     <title>min_size_content is not the minimum
</title>
     <description>&lt;div id=&quot;2025-02-23&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-02-23&quot;&gt;min_size_content is not the minimum&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If the parent does not have enough space, child widgets get less than their min size.&lt;/p&gt;&lt;p&gt;What about &lt;strong&gt;max_size_content&lt;/strong&gt; - can a widget get more?&lt;/p&gt;&lt;p&gt;Yes - if that widget is expanded, it can be larger than max_size_content.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;min_size_content&lt;/strong&gt; and &lt;strong&gt;max_size_content&lt;/strong&gt; are both constraints imposed on the minimum size that dvui saves for each widget from frame to frame.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  
    <item>
     <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
     <link>https://david-vanderson.github.io/log/#2025-02-22</link>
     <guid>https://david-vanderson.github.io/log/#2025-02-22</guid>
     <title>Why min_size_content?
</title>
     <description>&lt;div id=&quot;2025-02-22&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#2025-02-22&quot;&gt;Why min_size_content?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To make it clear that padding/border/margin is added on top of that.&lt;/p&gt;&lt;p&gt;Why not just &lt;strong&gt;min_size&lt;/strong&gt;?&lt;/p&gt;&lt;p&gt;This is an example of naming tension in API design.&lt;/p&gt;&lt;p&gt;When you want a widget to be larger than its minimum size (but not expanded):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;.{ .min_size_content = .{ .w = 100, .h = 50 } }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We could make it shorter and easier to remember by using just &lt;strong&gt;min_size&lt;/strong&gt;, but then you have to remember (or lookup) if that already includes padding/border/margin.&lt;/p&gt;&lt;p&gt;So &lt;strong&gt;min_size_content&lt;/strong&gt; costs more characters but makes reading the code (especially for people new to DVUI) slightly easier.&lt;/p&gt;&lt;p&gt;Hard to know which way to go, but I think about stuff like this a lot.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  
 </channel>
</rss>
